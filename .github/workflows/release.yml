name: CI & Release (Stable)

on:
  release:
    types: [released]

jobs:
  # Test against multiple Node versions
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [lts/*, 22.x, 20.x]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - run: yarn install --frozen-lockfile
      - run: yarn test

  # Build once for release
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: yarn
      - run: yarn install --frozen-lockfile
      - run: yarn build
      - uses: actions/upload-artifact@v4
        with:
          name: dist-folder
          path: ./dist

  # Package + upload tarballs
  release-dist:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: dist-folder
          path: ./dist
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: yarn
      - run: yarn install --frozen-lockfile
      - name: Get version from tag
        id: version
        run: echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
      - name: Get short SHA
        id: shortsha
        run: echo "sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
      - run: yarn version --new-version ${{ steps.version.outputs.version }} --no-git-tag-version
      - run: npx oclif pack tarballs --sha ${{ steps.shortsha.outputs.sha }}
      - run: npx oclif upload tarballs --sha ${{ steps.shortsha.outputs.sha }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET }}
          AWS_REGION: ${{ secrets.DO_SPACES_REGION }}
          AWS_ENDPOINT_URL: ${{ secrets.DO_SPACES_ENDPOINT }}
      - run: npx oclif promote --version ${{ steps.version.outputs.version }} --sha ${{ steps.shortsha.outputs.sha }} --ignore-missing
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET }}
          AWS_REGION: ${{ secrets.DO_SPACES_REGION }}
          AWS_ENDPOINT_URL: ${{ secrets.DO_SPACES_ENDPOINT }}

  # Publish to npm
  release-npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: dist-folder
          path: ./dist
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: yarn
      - run: yarn install --frozen-lockfile
      - name: Get version from tag
        run: echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
        id: version
      - run: yarn version --new-version ${{ steps.version.outputs.version }} --no-git-tag-version
      - run: echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run: npm publish --access public
