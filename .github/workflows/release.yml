name: CI & Full Release

on:
  push:
    branches:
      - main
      - staging
      - 'feature/*'
      - 'development/*'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - '**'

jobs:
  unit-tests:
    strategy:
      matrix:
        os: ['ubuntu-latest']
        node_version: [lts/-1, lts/*, latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node_version }}
          cache: yarn

      - name: Install libsecret (Ubuntu only)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libsecret-1-dev

      - run: yarn install --frozen-lockfile
      - run: yarn build
      - run: yarn test

  release:
    if: startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/heads/')
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: yarn
          registry-url: 'https://registry.npmjs.org'

      - run: yarn install --frozen-lockfile
      - run: yarn build

      - name: Determine version
        id: version
        shell: bash
        run: |
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          if [[ -z "$LATEST_TAG" ]]; then
            LATEST="0.0.0"
          else
            LATEST="${LATEST_TAG#v}"
          fi

          SUFFIX=""
          if [[ $GITHUB_REF != refs/tags/v* ]]; then
            if [[ "$LATEST" == "0.0.0" ]]; then
              COMMITS=$(git rev-list HEAD --count)
            else
              COMMITS=$(git rev-list "v$LATEST"..HEAD --count)
            fi
            BRANCH=$(echo $GITHUB_REF | sed 's|refs/heads/||;s|/|-|g')
            SUFFIX="-dev.${COMMITS}-${BRANCH}"
          fi

          NEW_VERSION="${LATEST}${SUFFIX}"
          echo "Calculated version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: npm version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: Publish to npm
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "Publishing stable release"
            npm publish --access public
          else
            echo "Publishing experimental release"
            npm publish --tag experimental --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install aws-cli
        run: sudo apt-get update && sudo apt-get install -y awscli

      - name: Build oclif standalone tarballs
        run: npx oclif pack
        env:
          NODE_ENV: production

      - name: Upload tarballs to DO Spaces
        run: |
          for file in ./dist/*.tar.*; do
            echo "Uploading $file"
            aws --endpoint-url ${{ secrets.DO_SPACES_ENDPOINT }} s3 cp "$file" \
              "s3://${{ secrets.DO_SPACES_BUCKET }}/versions/${{ steps.version.outputs.version }}/$(basename $file)" \
              --acl public-read
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET }}
          AWS_REGION: ${{ secrets.DO_SPACES_REGION }}

      - name: Generate/update oclif autoupdate manifest
        run: |
          npx oclif pack manifest ./dist --version ${{ steps.version.outputs.version }} \
            --name xgsd --s3-bucket ${{ secrets.DO_SPACES_BUCKET }} \
            --s3-endpoint ${{ secrets.DO_SPACES_ENDPOINT }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET }}
          AWS_REGION: ${{ secrets.DO_SPACES_REGION }}

      - name: Promote dev version to experimental channel (optional)
        if: startsWith(github.ref, 'refs/heads/development') || startsWith(github.ref, 'refs/heads/feature/')
        run: |
          npx oclif promote --channel experimental --version ${{ steps.version.outputs.version }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET }}
          AWS_REGION: ${{ secrets.DO_SPACES_REGION }}

      - name: Install fpm for deb packaging
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev rpm gnupg
          sudo gem install --no-document fpm

      - name: Build Debian package
        run: |
          VERSION=${{ steps.version.outputs.version }}
          TARBALL=$(ls dist/*.tar.xz | head -n 1)
          mkdir -p pkg
          fpm -s tar -t deb \
            -n xgsd \
            -v "$VERSION" \
            --prefix /usr/local \
            --description "xGSD CLI - Local workflow orchestration for solo developers for Node.js" \
            --url "https://xgsd.io" \
            --license "MIT" \
            "$TARBALL"
          mv *.deb pkg/

      - name: Import GPG key
        run: |
          echo "${{ secrets.XGSD_SIGNING_KEY }}" | gpg --batch --yes --import
          echo "${{ secrets.XGSD_GPG_OWNERTRUST }}" | gpg --import-ownertrust

      - name: Sign Debian package
        run: |
          DEB_FILE=$(ls pkg/*.deb | head -n 1)
          gpg --batch --yes --detach-sign --armor --local-user "${{ secrets.XGSD_GPG_KEY_ID }}" "$DEB_FILE"

      - name: Upload Debian package + signature to DO Spaces
        run: |
          for file in pkg/*; do
            echo "Uploading $file"
            aws --endpoint-url ${{ secrets.DO_SPACES_ENDPOINT }} s3 cp "$file" \
              "s3://${{ secrets.DO_SPACES_BUCKET }}/debs/${{ steps.version.outputs.version }}/$(basename $file)" \
              --acl public-read
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET }}
          AWS_REGION: ${{ secrets.DO_SPACES_REGION }}
