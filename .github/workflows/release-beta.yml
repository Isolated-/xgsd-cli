name: CI & Release (Beta)

on:
  push:
    tags:
      - 'v*.*.*-beta*' # Trigger on all beta tags

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: yarn
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Run tests
        run: yarn test

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: yarn
      - name: Restore Yarn cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.yarn/cache
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build project
        run: yarn build
      - name: Upload dist folder
        uses: actions/upload-artifact@v4
        with:
          name: dist-folder
          path: ./dist

  release-dist:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist-folder
          path: ./dist
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Get version from tag
        id: version
        run: |
          TAG="${GITHUB_REF_NAME}"
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT

      - name: Get short SHA
        id: shortsha
        run: echo "sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Update package version
        run: yarn version --new-version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: Build tarballs
        run: npx oclif pack tarballs --sha ${{ steps.shortsha.outputs.sha }} --targets linux-x64,linux-arm64,darwin-x64,darwin-arm64

      - name: Deploy tarballs
        run: npx oclif upload tarballs --sha ${{ steps.shortsha.outputs.sha }} --targets linux-x64,linux-arm64,darwin-x64,darwin-arm64
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET }}
          AWS_REGION: ${{ secrets.DO_SPACES_REGION }}
          AWS_ENDPOINT_URL: ${{ secrets.DO_SPACES_ENDPOINT }}

      - name: Promote tarballs
        run: npx oclif promote --version ${{ steps.version.outputs.version }} --sha ${{ steps.shortsha.outputs.sha }} --channel beta --targets linux-x64,linux-arm64,darwin-x64,darwin-arm64 --ignore-missing
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET }}
          AWS_REGION: ${{ secrets.DO_SPACES_REGION }}
          AWS_ENDPOINT_URL: ${{ secrets.DO_SPACES_ENDPOINT }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build xGSD CLI for ARMv7
        run: |
          docker run --rm -it \
            --platform linux/arm/v7 \
            -v ${{ github.workspace }}:/usr/src/app \
            -w /usr/src/app \
            node:20-bullseye bash -c "yarn install && yarn build"

      - name: Upload ARMv7 tarball
        uses: actions/upload-artifact@v4
        with:
          name: xgsd-armv7
          path: dist/xgsd-linux-armv7.tar.gz
